{
  "name": "hapi",
  "description": "HTTP Server framework",
  "homepage": "http://hapijs.com",
  "version": "0.16.0",
  "author": {
    "name": "Eran Hammer",
    "email": "eran@hueniverse.com",
    "url": "http://hueniverse.com"
  },
  "contributors": [
    {
      "name": "Van Nguyen",
      "email": "the.gol.effect@gmail.com"
    },
    {
      "name": "Wyatt Preul",
      "email": "wpreul@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/spumko/hapi"
  },
  "main": "index",
  "keywords": [
    "framework",
    "http",
    "api",
    "router"
  ],
  "engines": {
    "node": "0.8.x"
  },
  "dependencies": {
    "hoek": "0.7.x",
    "boom": "0.3.x",
    "joi": "0.2.x",
    "hawk": "0.11.x",
    "shot": "0.1.x",
    "oz": "0.1.x",
    "async": "0.1.x",
    "request": "2.16.x",
    "formidable": "1.0.x",
    "mime": "1.2.x",
    "catbox": "0.4.x",
    "json-stringify-safe": "3.0.x",
    "cryptiles": "0.1.x",
    "iron": "0.2.x",
    "lru-cache": "2.2.x",
    "optimist": "0.3.x",
    "negotiator": "0.2.x"
  },
  "devDependencies": {
    "lab": "0.0.x",
    "handlebars": "1.0.x",
    "jade": "0.28.x",
    "complexity-report": "0.x.x"
  },
  "bin": {
    "hapi": "./bin/hapi"
  },
  "scripts": {
    "test": "make test-cov"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/spumko/hapi/raw/master/LICENSE"
    }
  ],
  "readme": "<a href=\"https://github.com/spumko\"><img src=\"https://raw.github.com/spumko/spumko/master/images/from.png\" align=\"right\" /></a>\n<img src=\"https://raw.github.com/spumko/hapi/master/images/hapi.png\" />\n\nA rich framework for building restful API services. **hapi** is a configuration-centric framework in which\nauthentication requirements, input validation, data caching and pre-fetching, developer documentation,\nand other essential facilities are provided out-of-the-box and enabled using simple JSON configuration\nobjects. **hapi** enables developers to focus on writing reusable business logic instead of spending time\nwith everything else.\n\nFor the latest updates and release information follow [@hapijs](https://twitter.com/hapijs) on twitter.\n\nCurrent version: **0.16.0**\n\n[![Build Status](https://secure.travis-ci.org/spumko/hapi.png)](http://travis-ci.org/spumko/hapi)\n<img src=\"https://raw.github.com/olivierlacan/shields/master/coveralls/coveralls_100.png\" />\n\n\n### [API Reference](/docs/Reference.md)\n\n### [Tutorials](/docs/Tutorials.md)\n\n### [Plugins](/docs/Plugins.md)\n\n### [Breaking Changes](https://github.com/spumko/hapi/issues?labels=breaking+changes&state=closed)\n\n## Getting started\n\nTo demonstrate a basic example we will be creating a \"hello world\" service with a single API endpoint.\n\n### Hello World Server\n\nStart by creating a _package.json_ by running\n```\nnpm init\n```\n\nNow install **hapi** and have it saved to your _package.json_ dependencies by running\n```\nnpm install hapi --save\n```\n\nNext create an _'index.js'_ file and add the following contents to it:\n```javascript\nvar Hapi = require('hapi');\n\n// Create a server with a host and port\nvar server = Hapi.createServer('localhost', 8000);\n\n// Define the route\nvar hello = {\n    handler: function (request) {\n    \n        request.reply({ greeting: 'hello world' });\n    }\n};\n\n// Add the route\nserver.route({\n    method: 'GET',\n    path: '/hello',\n    config: hello\n});\n\n// Start the server\nserver.start();\n```\n\nStart the server with `node .` and navigate to the website at 'http://localhost:8000/hello' in a browser and you will see the following output:\n```json\n{\"greeting\":\"hello world\"}\n```\n\n\n### Hello World Server + Validation\n\nTo demonstrate one of the more powerful features in **hapi** we will change the 'hello' route to only respond whenever a _'name'_ is present on the querystring.  Change the _'index.js'_ so that the _'hello'_ config object looks like the following:\n```javascript\nvar hello = {\n    handler: function (request) {\n    \n        request.reply({ greeting: 'hello ' + request.query.name });\n    },\n    validate: { \n        query: {\n            name: Hapi.Types.String().required()\n        }\n    }\n};\n```\n\nWhen you start the server with `node .` and navigate to 'http://localhost:8000/hello' you will get a 400 response with an error explaining that 'name' is required.  When the 'name' is omitted from the querystring the handler will not be called.  However, if you do provide a 'name' it will be echoed out in the response.  If you request 'http://localhost:8000/hello?name=John' then you will get the following response:\n```json\n{\"greeting\":\"hello John\"}\n```\n\nTo learn more about the various validation options you can read the [validation section](docs/Reference.md#query-validation) in the reference.\n\n\n### Hello Static Server\n\nThe **hapi** route handler can be used to easily serve files, directories, render templates, and even proxy requests.  In this example the _'directory'_ handler will be used to create a static site serving files in the _'public'_ folder.  Remove the `hello` variable and make the `server.route` command look like the following:\n```javascript\nserver.route({\n    method: 'GET',\n    path: '/{path*}',\n    handler: {\n        directory: { path: './public', listing: false, index: true }\n    }\n});\n```\n\nCreate a folder named _'public'_ and add a _'index.html'_ file in the folder with the following contents:\n```html\n<html>\n    <head><title>Hello Static</title></head>\n    <body>\n        Hello Static\n    </body>\n</html>\n```\n\nNow when you request 'http://localhost:8000' you will see the html page rendered.  You can add other files in this folder and they will be served.  This is a good solution for serving static assets like images and css files.\n\n\n### Hello Templates Server\n\nTo demonstrate how to use **hapi** to render templates we will be creating a template and rendering it using the [handlebars](http://handlebarsjs.com/) engine.  Begin by installing handlebars by running the following npm command:\n```bash\nnpm install handlebars\n```\n\nNext create a directory named _'templates'_ that will contain the template files.  In this directory create a _'index.html'_ with the following contents:\n```html\n<html>\n    <head><title>{{greeting}}</title></head>\n    <body>\n        {{greeting}}\n    </body>\n</html>\n```\n\nThe next step is going to be to tell the **hapi** server to use templates and the handlebars engine.  After this, the route handler will be updated to render the template using an object that contains a _'greeting'_ property we want displayed.  Change the _'index.js'_ file so that it looks like the following:\n```javascript\nvar Hapi = require('hapi');\n\nvar options = {\n    views: {\n        path: './templates',\n        engine: {\n            module: 'handlebars'\n        }\n    }\n};\n\n// Create a server with a host, port, and options\nvar server = Hapi.createServer('localhost', 8000, options);\n\n// Define the route\nvar hello = {\n    handler: function (request) {\n    \n      // Render the view with the custom greeting\n        request.reply.view('index.html', { greeting: 'hello world' }).send();\n    }\n};\n\n// Add the route\nserver.route({\n    method: 'GET',\n    path: '/',\n    config: hello\n});\n\n// Start the server\nserver.start();\n```\n\nWhen you run the server with `node .` and view the homepage you will see the custom greeting message rendered.  More information on using templates with **hapi** can be found in the [views](docs/Reference.md#views) section of the [API Reference](docs/Reference.md).\n\n### Community\n\nFor discussion about hapi join the [#hapi channel](http://webchat.freenode.net/?channels=hapi) on irc.freenode.net.\n\n### [Contributors](https://github.com/spumko/hapi/contributors)\n",
  "readmeFilename": "README.md",
  "_id": "hapi@0.16.0",
  "_from": "hapi@"
}
